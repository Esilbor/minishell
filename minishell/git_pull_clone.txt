
---------------------------------------------------------
minishell git:(main) ls
---------------------------------------------------------
minishell

-----------------------------------------------------
➜  minishell git:(main) git checkout zora-branch 
------------------------------------------------------

branch 'zora-branch' set up to track 'origin/zora-branch'.
Switched to a new branch 'zora-branch'

-----------------------------------------------
➜  minishell git:(zora-branch) git status
-----------------------------------------------

On branch zora-branch
Your branch is up to date with 'origin/zora-branch'.

nothing to commit, working tree clean
➜  minishell git:(zora-branch) ls
minishell
➜  minishell git:(zora-branch) code .

------------------------------------------------
➜  minishell git:(zora-branch) git checkout main
--------------------------------------------------


Switched to branch 'main'
Your branch is up to date with 'origin/main'.

------------------------------------------------------
➜  minishell git:(main) git pull origin main
------------------------------------------------------

Username for 'https://github.com': zoNext
Password for 'https://zoNext@github.com': 
From https://github.com/Esilbor/minishell
 * branch            main       -> FETCH_HEAD
Already up to date.

-----------------------------------------------------
➜  minishell git:(main) git checkout zora-branch 
-----------------------------------------------------


Switched to branch 'zora-branch'
Your branch is up to date with 'origin/zora-branch'.

-------------------------------------------------
➜  minishell git:(zora-branch) git merge main
-------------------------------------------------


Auto-merging minishell/includes/minishell.h
CONFLICT (content): Merge conflict in minishell/includes/minishell.h
Auto-merging minishell/src/main.c
CONFLICT (content): Merge conflict in minishell/src/main.c
Automatic merge failed; fix conflicts and then commit the result.
➜  minishell git:(zora-branch) ✗ code .
➜  minishell git:(zora-branch) ✗ git add minishell/includes/minishell.h minishell/src/main.c 
➜  minishell git:(zora-branch) ✗ git push origin zora-branch            
Username for 'https://github.com': zoNext
Password for 'https://zoNext@github.com': 
Everything up-to-date
➜  minishell git:(zora-branch) ✗ git status
On branch zora-branch
Your branch is up to date with 'origin/zora-branch'.

All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:
	modified:   minishell/includes/minishell.h
	new file:   minishell/readme/minishell_function_organization.md
	renamed:    minishell/src/built-in/do_echo.c -> minishell/src/built-in/cd_echo_pwd_builtins.c
	deleted:    minishell/src/built-in/do_cd.c
	deleted:    minishell/src/built-in/do_env.c
	deleted:    minishell/src/built-in/do_pwd.c
	new file:   minishell/src/built-in/env_display.c
	new file:   minishell/src/built-in/env_management_1.c
	new file:   minishell/src/built-in/env_management_2.c
	renamed:    minishell/src/built-in/do_export.c -> minishell/src/built-in/export_handling_1.c
	new file:   minishell/src/built-in/export_handling_2.c
	renamed:    minishell/src/built-in/do_unset.c -> minishell/src/built-in/unset_builtin.c
	modified:   minishell/src/main.c
	modified:   minishell/src/parsing/command_builder.c
	new file:   minishell/src/parsing/command_utils.c
	deleted:    minishell/src/parsing/expand.c
	new file:   minishell/src/parsing/expansion_cleanup.c
	new file:   minishell/src/parsing/expansion_merge.c
	new file:   minishell/src/parsing/expansion_utils_1.c
	new file:   minishell/src/parsing/expansion_utils_2.c
	deleted:    minishell/src/parsing/lexer.c
	new file:   minishell/src/parsing/lexer_handlers_1.c
	new file:   minishell/src/parsing/lexer_handlers_2.c
	new file:   minishell/src/parsing/lexer_spec_chars.c
	new file:   minishell/src/parsing/lexer_utils_1.c
	new file:   minishell/src/parsing/lexer_utils_2.c
	modified:   minishell/src/parsing/print.c

-------------------------------------------------------------------------------
➜  minishell git:(zora-branch) ✗ git add .
➜  minishell git:(zora-branch) ✗ git commit -m "ajout dernieres modif de boris"
--------------------------------------------------------------------------------

[zora-branch c8e1ef9] ajout dernieres modif de boris

---------------------------------------------------------------
➜  minishell git:(zora-branch) git push origin zora-branch 
----------------------------------------------------------------


Username for 'https://github.com': zoNext
Password for 'https://zoNext@github.com': 
Enumerating objects: 19, done.
Counting objects: 100% (19/19), done.
Delta compression using up to 8 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (7/7), 1.46 KiB | 1.46 MiB/s, done.
Total 7 (delta 3), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
To https://github.com/Esilbor/minishell.git
   e1f61e8..c8e1ef9  zora-branch -> zora-branch

---------------------------------------------
➜  minishell git:(zora-branch) ls
--------------------------------------------

minishell
➜  minishell git:(zora-branch) cd minishell 
➜  minishell git:(zora-branch) ls
art.txt  file1  includes  infile  libft  Makefile  readme  src  suppressions.supp




1-Assurez-vous que votre branche locale est à jour :


minishell git:(main) git checkout zora-branch

➜  minishell git:(zora-branch) git checkout main

 minishell git:(main) git pull origin main

 ➜  minishell git:(main) git checkout zora-branch 

 ➜  minishell git:(zora-branch) git merge main

 ➜  minishell git:(zora-branch) ✗ git status

 ➜  minishell git:(zora-branch) ✗ git add .

➜  minishell git:(zora-branch) ✗ git commit -m "ajout dernieres modif ...."


➜  minishell git:(zora-branch) git push origin zora-branch 



Pour récupérer les modifications du branche main (ou toute autre branche principale) dans votre branche locale sur GitHub,
 vous pouvez suivre ces étapes en utilisant la ligne de commande Git. 
 
1- Assurez-vous d'être dans votre branche locale où vous souhaitez fusionner les changements.

Assurez-vous que votre branche locale est à jour :
Avant de commencer, assurez-vous que votre branche locale est à jour avec les derniers changements de la branche main. Vous pouvez le faire en exécutant les commandes suivantes :


git checkout main
git pull origin main

2- Revenez à votre branche locale :

Après avoir mis à jour la branche main, revenez à votre branche locale :

git checkout <votre-branche>


3- Fusionnez les modifications de la branche main dans votre branche :
Utilisez la commande git merge pour fusionner les modifications de la branche main dans votre branche locale. Assurez-vous d'être dans votre branche locale avant d'exécuter cette commande :


git merge main


Si vous avez des conflits de fusion, Git vous demandera de les résoudre. Vous devrez ouvrir les fichiers en conflit, résoudre les conflits manuellement, puis marquer les fichiers comme résolus avec la commande :


git add <fichier-en-conflit>

Ensuite, vous pouvez finaliser la fusion en exécutant la commande 

git merge --continue.

4- Poussez les modifications fusionnées vers votre référentiel distant (GitHub) :
Après avoir fusionné les modifications localement, vous devez les pousser vers votre référentiel distant (GitHub) en utilisant la commande :


git push origin <votre-branche>

Ces étapes devraient vous permettre de récupérer les modifications de la branche main dans votre branche locale sur GitHub. Assurez-vous de comprendre les implications de la fusion, surtout si d'autres collaborateurs travaillent sur les mêmes fichiers que vous.


--------------------------------------------

ok maintenant si je veux continuer a travailler dessus en local, quelle est la commande a faire

ChatGPT : 

Si vous avez fusionné les modifications de la branche main dans votre branche locale 
et que vous souhaitez continuer à travailler sur cette branche, 
vous pouvez simplement continuer à effectuer des modifications comme d'habitude. 
Voici quelques commandes Git courantes que vous pourriez utiliser :

Pour vérifier l'état de vos fichiers locaux :


git status


Cela vous montrera les fichiers modifiés, ajoutés ou supprimés depuis la dernière validation.

Pour ajouter les modifications à la zone de staging :

git add <nom-du-fichier>


Vous pouvez également utiliser 

git add . pour ajouter toutes les modifications.

Pour valider les modifications ajoutées à la zone de staging :


git commit -m "Message de validation"

Assurez-vous de remplacer "Message de validation" par un message descriptif de vos modifications.

Pour pousser les modifications vers le référentiel distant (GitHub) :

git push origin <votre-branche>

Cela mettra à jour la branche sur GitHub avec vos dernières modifications.

Pour récupérer les dernières modifications depuis la branche main :
Avant de pousser vos modifications, il peut être utile de récupérer les dernières modifications de la branche main (ou toute autre branche principale) en utilisant les commandes suivantes :

bash
Copy code
git checkout main
git pull origin main
git checkout <votre-branche>
git merge main
Cela garantira que votre branche locale est à jour avant de pousser vos modifications.

En résumé, une fois que vous avez récupéré les modifications de la branche main dans votre branche locale, vous pouvez simplement travailler comme d'habitude en ajoutant, validant et poussant vos modifications. Veillez à maintenir votre branche locale à jour avec les derniers changements de la branche principale pour éviter les conflits majeurs lors de la fusion ultérieure.




